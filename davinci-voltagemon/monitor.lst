
monitor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000436  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000436  000004ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  000004ca  2**0
                  ALLOC
  3 .stab         0000132c  00000000  00000000  000004cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fa0  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002798  2**0
                  CONTENTS, READONLY
  6 .debug_info   000002dc  00000000  00000000  000027a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002b6  00000000  00000000  00002a85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00002d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000fa  00000000  00000000  00002d58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0b c0       	rjmp	.+22     	; 0x18 <__ctors_end>
   2:	18 c0       	rjmp	.+48     	; 0x34 <__bad_interrupt>
   4:	17 c0       	rjmp	.+46     	; 0x34 <__bad_interrupt>
   6:	c5 c0       	rjmp	.+394    	; 0x192 <__vector_3>
   8:	15 c0       	rjmp	.+42     	; 0x34 <__bad_interrupt>
   a:	14 c0       	rjmp	.+40     	; 0x34 <__bad_interrupt>
   c:	13 c0       	rjmp	.+38     	; 0x34 <__bad_interrupt>
   e:	12 c0       	rjmp	.+36     	; 0x34 <__bad_interrupt>
  10:	11 c0       	rjmp	.+34     	; 0x34 <__bad_interrupt>
  12:	10 c0       	rjmp	.+32     	; 0x34 <__bad_interrupt>
  14:	0f c0       	rjmp	.+30     	; 0x34 <__bad_interrupt>
  16:	0e c0       	rjmp	.+28     	; 0x34 <__bad_interrupt>

00000018 <__ctors_end>:
  18:	11 24       	eor	r1, r1
  1a:	1f be       	out	0x3f, r1	; 63
  1c:	cf ed       	ldi	r28, 0xDF	; 223
  1e:	cd bf       	out	0x3d, r28	; 61

00000020 <__do_clear_bss>:
  20:	10 e0       	ldi	r17, 0x00	; 0
  22:	a0 e6       	ldi	r26, 0x60	; 96
  24:	b0 e0       	ldi	r27, 0x00	; 0
  26:	01 c0       	rjmp	.+2      	; 0x2a <.do_clear_bss_start>

00000028 <.do_clear_bss_loop>:
  28:	1d 92       	st	X+, r1

0000002a <.do_clear_bss_start>:
  2a:	aa 36       	cpi	r26, 0x6A	; 106
  2c:	b1 07       	cpc	r27, r17
  2e:	e1 f7       	brne	.-8      	; 0x28 <.do_clear_bss_loop>
  30:	f4 d1       	rcall	.+1000   	; 0x41a <main>
  32:	ff c1       	rjmp	.+1022   	; 0x432 <_exit>

00000034 <__bad_interrupt>:
  34:	e5 cf       	rjmp	.-54     	; 0x0 <__vectors>

00000036 <checkRails>:
    }

    return 0;
}

void checkRails(){
  36:	0f 93       	push	r16
  38:	1f 93       	push	r17
		if (getVCCVolts() > v24_upper) { set_1_YEL(); }
		else if (getVCCVolts() < v24_lower) { set_1_RED(); }
		else { set_1_GRN();	}
		*/
		
		unsigned long int voltage = getAdc(0);
  3a:	80 e0       	ldi	r24, 0x00	; 0
  3c:	90 e0       	ldi	r25, 0x00	; 0
  3e:	ce d1       	rcall	.+924    	; 0x3dc <getAdc>
		voltage = getAdc(0);
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	cb d1       	rcall	.+918    	; 0x3dc <getAdc>
		if (voltage >= rail1_upper) { rail1  = HIGH; }
  46:	6b 39       	cpi	r22, 0x9B	; 155
  48:	71 05       	cpc	r23, r1
  4a:	81 05       	cpc	r24, r1
  4c:	91 05       	cpc	r25, r1
  4e:	18 f0       	brcs	.+6      	; 0x56 <__SREG__+0x17>
  50:	83 e0       	ldi	r24, 0x03	; 3
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	0f c0       	rjmp	.+30     	; 0x74 <__SREG__+0x35>
		else if ((voltage <rail1_upper) && (voltage >= rail1_lower)) { rail1=NOMINAL; }
  56:	06 2f       	mov	r16, r22
  58:	17 2f       	mov	r17, r23
  5a:	28 2f       	mov	r18, r24
  5c:	39 2f       	mov	r19, r25
  5e:	0d 57       	subi	r16, 0x7D	; 125
  60:	11 09       	sbc	r17, r1
  62:	21 09       	sbc	r18, r1
  64:	31 09       	sbc	r19, r1
  66:	0e 31       	cpi	r16, 0x1E	; 30
  68:	11 05       	cpc	r17, r1
  6a:	21 05       	cpc	r18, r1
  6c:	31 05       	cpc	r19, r1
  6e:	38 f4       	brcc	.+14     	; 0x7e <__SREG__+0x3f>
  70:	82 e0       	ldi	r24, 0x02	; 2
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	90 93 67 00 	sts	0x0067, r25
  78:	80 93 66 00 	sts	0x0066, r24
  7c:	13 c0       	rjmp	.+38     	; 0xa4 <__SREG__+0x65>
		else if ((voltage < rail1_lower) && (voltage >= rail_min )) { rail1= LOW; }
  7e:	b9 2f       	mov	r27, r25
  80:	a8 2f       	mov	r26, r24
  82:	97 2f       	mov	r25, r23
  84:	86 2f       	mov	r24, r22
  86:	0a 97       	sbiw	r24, 0x0a	; 10
  88:	a1 09       	sbc	r26, r1
  8a:	b1 09       	sbc	r27, r1
  8c:	83 37       	cpi	r24, 0x73	; 115
  8e:	91 05       	cpc	r25, r1
  90:	a1 05       	cpc	r26, r1
  92:	b1 05       	cpc	r27, r1
  94:	18 f4       	brcc	.+6      	; 0x9c <__SREG__+0x5d>
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	ec cf       	rjmp	.-40     	; 0x74 <__SREG__+0x35>
		else { rail1 = NONE;	}
  9c:	10 92 67 00 	sts	0x0067, r1
  a0:	10 92 66 00 	sts	0x0066, r1

		voltage = getAdc(1);
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	99 d1       	rcall	.+818    	; 0x3dc <getAdc>
		if (voltage >= rail2_upper) { rail2  = HIGH; }
  aa:	62 32       	cpi	r22, 0x22	; 34
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	72 07       	cpc	r23, r18
  b0:	81 05       	cpc	r24, r1
  b2:	91 05       	cpc	r25, r1
  b4:	18 f0       	brcs	.+6      	; 0xbc <__SREG__+0x7d>
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	1e c0       	rjmp	.+60     	; 0xf8 <__stack+0x19>
		else if ((voltage <rail2_upper) && (voltage >= rail2_lower)) { rail2=NOMINAL; }
  bc:	06 2f       	mov	r16, r22
  be:	17 2f       	mov	r17, r23
  c0:	28 2f       	mov	r18, r24
  c2:	39 2f       	mov	r19, r25
  c4:	02 50       	subi	r16, 0x02	; 2
  c6:	11 40       	sbci	r17, 0x01	; 1
  c8:	21 09       	sbc	r18, r1
  ca:	31 09       	sbc	r19, r1
  cc:	00 32       	cpi	r16, 0x20	; 32
  ce:	11 05       	cpc	r17, r1
  d0:	21 05       	cpc	r18, r1
  d2:	31 05       	cpc	r19, r1
  d4:	18 f4       	brcc	.+6      	; 0xdc <__SREG__+0x9d>
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e c0       	rjmp	.+28     	; 0xf8 <__stack+0x19>
		else if ((voltage < rail2_lower) && (voltage >= rail_min )) { rail2= LOW; }
  dc:	b9 2f       	mov	r27, r25
  de:	a8 2f       	mov	r26, r24
  e0:	97 2f       	mov	r25, r23
  e2:	86 2f       	mov	r24, r22
  e4:	0a 97       	sbiw	r24, 0x0a	; 10
  e6:	a1 09       	sbc	r26, r1
  e8:	b1 09       	sbc	r27, r1
  ea:	88 3f       	cpi	r24, 0xF8	; 248
  ec:	91 05       	cpc	r25, r1
  ee:	a1 05       	cpc	r26, r1
  f0:	b1 05       	cpc	r27, r1
  f2:	38 f4       	brcc	.+14     	; 0x102 <__stack+0x23>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	90 93 63 00 	sts	0x0063, r25
  fc:	80 93 62 00 	sts	0x0062, r24
 100:	04 c0       	rjmp	.+8      	; 0x10a <__stack+0x2b>
		else { rail2 = NONE;	}
 102:	10 92 63 00 	sts	0x0063, r1
 106:	10 92 62 00 	sts	0x0062, r1
		if (voltage >= rail3_upper) { rail3  = HIGH; }
		else if ((voltage <rail3_upper) && (voltage >= rail3_lower)) { rail3=NOMINAL; }
		else if ((voltage < rail3_lower) && (voltage >= rail_min )) { rail3= LOW; }
		else { rail3 = NONE;	}
#endif
}
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <setLEDs>:
		case LOW: setLED(0,RED);break;
		case NOMINAL: setLED(0,GREEN);break;
		case HIGH: setLED(0,YELLOW);break;
	}
*/
	switch(rail1){
 110:	80 91 66 00 	lds	r24, 0x0066
 114:	90 91 67 00 	lds	r25, 0x0067
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	91 05       	cpc	r25, r1
 11c:	49 f0       	breq	.+18     	; 0x130 <setLEDs+0x20>
 11e:	40 f0       	brcs	.+16     	; 0x130 <setLEDs+0x20>
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	91 05       	cpc	r25, r1
 124:	41 f0       	breq	.+16     	; 0x136 <setLEDs+0x26>
 126:	03 97       	sbiw	r24, 0x03	; 3
 128:	59 f4       	brne	.+22     	; 0x140 <setLEDs+0x30>
		case NONE: setLED(0,RED);break;
		case LOW: setLED(0,RED);break;
		case NOMINAL: setLED(0,GREEN);break;
		case HIGH: setLED(0,YELLOW);break;
 12a:	63 e0       	ldi	r22, 0x03	; 3
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	05 c0       	rjmp	.+10     	; 0x13a <setLEDs+0x2a>
		case HIGH: setLED(0,YELLOW);break;
	}
*/
	switch(rail1){
		case NONE: setLED(0,RED);break;
		case LOW: setLED(0,RED);break;
 130:	62 e0       	ldi	r22, 0x02	; 2
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <setLEDs+0x2a>
		case NOMINAL: setLED(0,GREEN);break;
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	70 e0       	ldi	r23, 0x00	; 0
		case HIGH: setLED(0,YELLOW);break;
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	a7 d0       	rcall	.+334    	; 0x28e <setLED>
	}

// force 1,0 off
//set_0_undir();
//set_1_undir();
	switch(rail2){
 140:	80 91 62 00 	lds	r24, 0x0062
 144:	90 91 63 00 	lds	r25, 0x0063
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	91 05       	cpc	r25, r1
 14c:	49 f0       	breq	.+18     	; 0x160 <setLEDs+0x50>
 14e:	40 f0       	brcs	.+16     	; 0x160 <setLEDs+0x50>
 150:	82 30       	cpi	r24, 0x02	; 2
 152:	91 05       	cpc	r25, r1
 154:	41 f0       	breq	.+16     	; 0x166 <setLEDs+0x56>
 156:	03 97       	sbiw	r24, 0x03	; 3
 158:	59 f4       	brne	.+22     	; 0x170 <setLEDs+0x60>
		case NONE: setLED(1,RED);break;
		case LOW: setLED(1,RED);break;
		case NOMINAL: setLED(1,GREEN);break;
		case HIGH: setLED(1,YELLOW);break;
 15a:	63 e0       	ldi	r22, 0x03	; 3
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	05 c0       	rjmp	.+10     	; 0x16a <setLEDs+0x5a>
// force 1,0 off
//set_0_undir();
//set_1_undir();
	switch(rail2){
		case NONE: setLED(1,RED);break;
		case LOW: setLED(1,RED);break;
 160:	62 e0       	ldi	r22, 0x02	; 2
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <setLEDs+0x5a>
		case NOMINAL: setLED(1,GREEN);break;
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	70 e0       	ldi	r23, 0x00	; 0
		case HIGH: setLED(1,YELLOW);break;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	8f d0       	rcall	.+286    	; 0x28e <setLED>
	}
#endif

#ifdef master
#else
	set_2_undir();
 170:	87 b3       	in	r24, 0x17	; 23
 172:	87 7e       	andi	r24, 0xE7	; 231
 174:	87 bb       	out	0x17, r24	; 23
#endif
set_3_undir();
 176:	87 b3       	in	r24, 0x17	; 23
 178:	8f 79       	andi	r24, 0x9F	; 159
 17a:	87 bb       	out	0x17, r24	; 23
 17c:	08 95       	ret

0000017e <initTimer>:



void initTimer(){

TCCR1A = 0x00; 
 17e:	10 be       	out	0x30, r1	; 48
TCCR1B |= _BV(CS10) | _BV(CS11)  | _BV(CS13); 
 180:	8f b5       	in	r24, 0x2f	; 47
 182:	8b 60       	ori	r24, 0x0B	; 11
 184:	8f bd       	out	0x2f, r24	; 47

TIMSK = _BV(OCIE1A); 
 186:	80 e4       	ldi	r24, 0x40	; 64
 188:	89 bf       	out	0x39, r24	; 57

OCR1A = 5; 
 18a:	85 e0       	ldi	r24, 0x05	; 5
 18c:	8d bd       	out	0x2d, r24	; 45


   sei();
 18e:	78 94       	sei
 190:	08 95       	ret

00000192 <__vector_3>:
int state=0;
#ifdef __AVR_ATtiny261__
ISR(TIMER1_COMPA_vect) {
#else

ISR(TIMER1_CMPA_vect){
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	2f 93       	push	r18
 19e:	3f 93       	push	r19
 1a0:	4f 93       	push	r20
 1a2:	5f 93       	push	r21
 1a4:	6f 93       	push	r22
 1a6:	7f 93       	push	r23
 1a8:	8f 93       	push	r24
 1aa:	9f 93       	push	r25
 1ac:	af 93       	push	r26
 1ae:	bf 93       	push	r27
 1b0:	ef 93       	push	r30
 1b2:	ff 93       	push	r31

	/*if (state & logic==NONE) {set_0_undir();}
	else {set_0_dir();}*/


	if (state & rail1==NONE) {set_0_undir();}
 1b4:	21 e0       	ldi	r18, 0x01	; 1
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	80 91 66 00 	lds	r24, 0x0066
 1bc:	90 91 67 00 	lds	r25, 0x0067
 1c0:	89 2b       	or	r24, r25
 1c2:	11 f0       	breq	.+4      	; 0x1c8 <__vector_3+0x36>
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	80 91 60 00 	lds	r24, 0x0060
 1cc:	90 91 61 00 	lds	r25, 0x0061
 1d0:	82 23       	and	r24, r18
 1d2:	93 23       	and	r25, r19
 1d4:	89 2b       	or	r24, r25
 1d6:	19 f0       	breq	.+6      	; 0x1de <__vector_3+0x4c>
 1d8:	8a b3       	in	r24, 0x1a	; 26
 1da:	8f 7c       	andi	r24, 0xCF	; 207
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <__vector_3+0x50>
	else {set_0_dir();}
 1de:	8a b3       	in	r24, 0x1a	; 26
 1e0:	80 63       	ori	r24, 0x30	; 48
 1e2:	8a bb       	out	0x1a, r24	; 26

	if (state & rail2==NONE) {set_1_undir();}
 1e4:	21 e0       	ldi	r18, 0x01	; 1
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	80 91 62 00 	lds	r24, 0x0062
 1ec:	90 91 63 00 	lds	r25, 0x0063
 1f0:	89 2b       	or	r24, r25
 1f2:	11 f0       	breq	.+4      	; 0x1f8 <__vector_3+0x66>
 1f4:	20 e0       	ldi	r18, 0x00	; 0
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	80 91 60 00 	lds	r24, 0x0060
 1fc:	90 91 61 00 	lds	r25, 0x0061
 200:	82 23       	and	r24, r18
 202:	93 23       	and	r25, r19
 204:	89 2b       	or	r24, r25
 206:	19 f0       	breq	.+6      	; 0x20e <__vector_3+0x7c>
 208:	8a b3       	in	r24, 0x1a	; 26
 20a:	8f 73       	andi	r24, 0x3F	; 63
 20c:	02 c0       	rjmp	.+4      	; 0x212 <__vector_3+0x80>
	else {set_1_dir();}
 20e:	8a b3       	in	r24, 0x1a	; 26
 210:	80 6c       	ori	r24, 0xC0	; 192
 212:	8a bb       	out	0x1a, r24	; 26
#ifdef master
	if (state & rail3==NONE) {set_2_undir();}
	else {set_2_dir();}
#endif

	setLED(0,OFF);
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	38 d0       	rcall	.+112    	; 0x28e <setLED>
	state = ~state;
 21e:	80 91 60 00 	lds	r24, 0x0060
 222:	90 91 61 00 	lds	r25, 0x0061
 226:	80 95       	com	r24
 228:	90 95       	com	r25
 22a:	90 93 61 00 	sts	0x0061, r25
 22e:	80 93 60 00 	sts	0x0060, r24
}
 232:	ff 91       	pop	r31
 234:	ef 91       	pop	r30
 236:	bf 91       	pop	r27
 238:	af 91       	pop	r26
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	7f 91       	pop	r23
 240:	6f 91       	pop	r22
 242:	5f 91       	pop	r21
 244:	4f 91       	pop	r20
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <derpBlink>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 254:	2f e9       	ldi	r18, 0x9F	; 159
 256:	86 e8       	ldi	r24, 0x86	; 134
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	21 50       	subi	r18, 0x01	; 1
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <derpBlink+0x6>
 262:	00 c0       	rjmp	.+0      	; 0x264 <derpBlink+0x10>
 264:	00 00       	nop

void derpBlink(){
	while(1){
		_delay_ms(500);
		setLED(0,RED);
 266:	62 e0       	ldi	r22, 0x02	; 2
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0f d0       	rcall	.+30     	; 0x28e <setLED>
 270:	2f e9       	ldi	r18, 0x9F	; 159
 272:	86 e8       	ldi	r24, 0x86	; 134
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	21 50       	subi	r18, 0x01	; 1
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <derpBlink+0x22>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <derpBlink+0x2c>
 280:	00 00       	nop
		_delay_ms(500);
		setLED(0,GREEN);
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	01 d0       	rcall	.+2      	; 0x28e <setLED>
	}
 28c:	e3 cf       	rjmp	.-58     	; 0x254 <derpBlink>

0000028e <setLED>:
#include "leds.h"
#include <avr/io.h>

void setLED(int led, led_state color){
	switch(led){
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	91 05       	cpc	r25, r1
 292:	59 f1       	breq	.+86     	; 0x2ea <setLED+0x5c>
 294:	1c f4       	brge	.+6      	; 0x29c <setLED+0xe>
 296:	89 2b       	or	r24, r25
 298:	49 f0       	breq	.+18     	; 0x2ac <setLED+0x1e>
 29a:	08 95       	ret
 29c:	82 30       	cpi	r24, 0x02	; 2
 29e:	91 05       	cpc	r25, r1
 2a0:	09 f4       	brne	.+2      	; 0x2a4 <setLED+0x16>
 2a2:	41 c0       	rjmp	.+130    	; 0x326 <setLED+0x98>
 2a4:	03 97       	sbiw	r24, 0x03	; 3
 2a6:	09 f4       	brne	.+2      	; 0x2aa <setLED+0x1c>
 2a8:	5c c0       	rjmp	.+184    	; 0x362 <setLED+0xd4>
 2aa:	08 95       	ret
		case 0:
			switch(color){
 2ac:	61 30       	cpi	r22, 0x01	; 1
 2ae:	71 05       	cpc	r23, r1
 2b0:	81 f0       	breq	.+32     	; 0x2d2 <setLED+0x44>
 2b2:	38 f0       	brcs	.+14     	; 0x2c2 <setLED+0x34>
 2b4:	62 30       	cpi	r22, 0x02	; 2
 2b6:	71 05       	cpc	r23, r1
 2b8:	39 f0       	breq	.+14     	; 0x2c8 <setLED+0x3a>
 2ba:	63 30       	cpi	r22, 0x03	; 3
 2bc:	71 05       	cpc	r23, r1
 2be:	71 f0       	breq	.+28     	; 0x2dc <setLED+0x4e>
 2c0:	08 95       	ret
				case OFF: set_0_OFF(); break;
 2c2:	8b b3       	in	r24, 0x1b	; 27
 2c4:	8f 7c       	andi	r24, 0xCF	; 207
 2c6:	0f c0       	rjmp	.+30     	; 0x2e6 <setLED+0x58>
				case RED: set_0_RED();break;
 2c8:	8b b3       	in	r24, 0x1b	; 27
 2ca:	8f 7c       	andi	r24, 0xCF	; 207
 2cc:	8b bb       	out	0x1b, r24	; 27
 2ce:	dd 9a       	sbi	0x1b, 5	; 27
 2d0:	08 95       	ret
				case GREEN: set_0_GRN(); break;
 2d2:	8b b3       	in	r24, 0x1b	; 27
 2d4:	8f 7c       	andi	r24, 0xCF	; 207
 2d6:	8b bb       	out	0x1b, r24	; 27
 2d8:	dc 9a       	sbi	0x1b, 4	; 27
 2da:	08 95       	ret
				case YELLOW: set_0_YEL(); break;
 2dc:	8b b3       	in	r24, 0x1b	; 27
 2de:	8f 7c       	andi	r24, 0xCF	; 207
 2e0:	8b bb       	out	0x1b, r24	; 27
 2e2:	8b b3       	in	r24, 0x1b	; 27
 2e4:	80 63       	ori	r24, 0x30	; 48
 2e6:	8b bb       	out	0x1b, r24	; 27
 2e8:	08 95       	ret
			}
		break;
		case 1:
			switch(color){
 2ea:	61 30       	cpi	r22, 0x01	; 1
 2ec:	71 05       	cpc	r23, r1
 2ee:	81 f0       	breq	.+32     	; 0x310 <setLED+0x82>
 2f0:	38 f0       	brcs	.+14     	; 0x300 <setLED+0x72>
 2f2:	62 30       	cpi	r22, 0x02	; 2
 2f4:	71 05       	cpc	r23, r1
 2f6:	39 f0       	breq	.+14     	; 0x306 <setLED+0x78>
 2f8:	63 30       	cpi	r22, 0x03	; 3
 2fa:	71 05       	cpc	r23, r1
 2fc:	71 f0       	breq	.+28     	; 0x31a <setLED+0x8c>
 2fe:	08 95       	ret
				case OFF: set_1_OFF(); break;
 300:	8b b3       	in	r24, 0x1b	; 27
 302:	8f 73       	andi	r24, 0x3F	; 63
 304:	f0 cf       	rjmp	.-32     	; 0x2e6 <setLED+0x58>
				case RED: set_1_RED();break;
 306:	8b b3       	in	r24, 0x1b	; 27
 308:	8f 73       	andi	r24, 0x3F	; 63
 30a:	8b bb       	out	0x1b, r24	; 27
 30c:	df 9a       	sbi	0x1b, 7	; 27
 30e:	08 95       	ret
				case GREEN: set_1_GRN(); break;
 310:	8b b3       	in	r24, 0x1b	; 27
 312:	8f 73       	andi	r24, 0x3F	; 63
 314:	8b bb       	out	0x1b, r24	; 27
 316:	de 9a       	sbi	0x1b, 6	; 27
 318:	08 95       	ret
				case YELLOW: set_1_YEL(); break;
 31a:	8b b3       	in	r24, 0x1b	; 27
 31c:	8f 73       	andi	r24, 0x3F	; 63
 31e:	8b bb       	out	0x1b, r24	; 27
 320:	8b b3       	in	r24, 0x1b	; 27
 322:	80 6c       	ori	r24, 0xC0	; 192
 324:	e0 cf       	rjmp	.-64     	; 0x2e6 <setLED+0x58>
			}

		break;
		case 2:
			switch(color){
 326:	61 30       	cpi	r22, 0x01	; 1
 328:	71 05       	cpc	r23, r1
 32a:	81 f0       	breq	.+32     	; 0x34c <setLED+0xbe>
 32c:	38 f0       	brcs	.+14     	; 0x33c <setLED+0xae>
 32e:	62 30       	cpi	r22, 0x02	; 2
 330:	71 05       	cpc	r23, r1
 332:	39 f0       	breq	.+14     	; 0x342 <setLED+0xb4>
 334:	63 30       	cpi	r22, 0x03	; 3
 336:	71 05       	cpc	r23, r1
 338:	71 f0       	breq	.+28     	; 0x356 <setLED+0xc8>
 33a:	08 95       	ret
				case OFF: set_2_OFF(); break;
 33c:	88 b3       	in	r24, 0x18	; 24
 33e:	87 7e       	andi	r24, 0xE7	; 231
 340:	29 c0       	rjmp	.+82     	; 0x394 <setLED+0x106>
				case RED: set_2_RED();break;
 342:	88 b3       	in	r24, 0x18	; 24
 344:	87 7e       	andi	r24, 0xE7	; 231
 346:	88 bb       	out	0x18, r24	; 24
 348:	c4 9a       	sbi	0x18, 4	; 24
 34a:	08 95       	ret
				case GREEN: set_2_GRN(); break;
 34c:	88 b3       	in	r24, 0x18	; 24
 34e:	87 7e       	andi	r24, 0xE7	; 231
 350:	88 bb       	out	0x18, r24	; 24
 352:	c3 9a       	sbi	0x18, 3	; 24
 354:	08 95       	ret
				case YELLOW: set_2_YEL(); break;
 356:	88 b3       	in	r24, 0x18	; 24
 358:	87 7e       	andi	r24, 0xE7	; 231
 35a:	88 bb       	out	0x18, r24	; 24
 35c:	88 b3       	in	r24, 0x18	; 24
 35e:	88 61       	ori	r24, 0x18	; 24
 360:	19 c0       	rjmp	.+50     	; 0x394 <setLED+0x106>
			}
		break;
		case 3:
			switch(color){
 362:	61 30       	cpi	r22, 0x01	; 1
 364:	71 05       	cpc	r23, r1
 366:	81 f0       	breq	.+32     	; 0x388 <setLED+0xfa>
 368:	38 f0       	brcs	.+14     	; 0x378 <setLED+0xea>
 36a:	62 30       	cpi	r22, 0x02	; 2
 36c:	71 05       	cpc	r23, r1
 36e:	39 f0       	breq	.+14     	; 0x37e <setLED+0xf0>
 370:	63 30       	cpi	r22, 0x03	; 3
 372:	71 05       	cpc	r23, r1
 374:	61 f0       	breq	.+24     	; 0x38e <setLED+0x100>
 376:	08 95       	ret
				case OFF: set_3_OFF(); break;
 378:	88 b3       	in	r24, 0x18	; 24
 37a:	8f 79       	andi	r24, 0x9F	; 159
 37c:	0b c0       	rjmp	.+22     	; 0x394 <setLED+0x106>
				case RED: set_3_RED();break;
 37e:	88 b3       	in	r24, 0x18	; 24
 380:	8f 79       	andi	r24, 0x9F	; 159
 382:	88 bb       	out	0x18, r24	; 24
 384:	c6 9a       	sbi	0x18, 6	; 24
 386:	08 95       	ret
				case GREEN: set_3_GRN(); break;
 388:	c6 98       	cbi	0x18, 6	; 24
 38a:	c5 9a       	sbi	0x18, 5	; 24
 38c:	08 95       	ret
				case YELLOW: set_3_YEL(); break;
 38e:	c6 98       	cbi	0x18, 6	; 24
 390:	88 b3       	in	r24, 0x18	; 24
 392:	80 66       	ori	r24, 0x60	; 96
 394:	88 bb       	out	0x18, r24	; 24
 396:	08 95       	ret

00000398 <initLEDs>:
	
}


void initLEDs(){
    set_1_dir();set_2_dir();set_3_dir();set_0_dir();
 398:	8a b3       	in	r24, 0x1a	; 26
 39a:	80 6c       	ori	r24, 0xC0	; 192
 39c:	8a bb       	out	0x1a, r24	; 26
 39e:	87 b3       	in	r24, 0x17	; 23
 3a0:	88 61       	ori	r24, 0x18	; 24
 3a2:	87 bb       	out	0x17, r24	; 23
 3a4:	87 b3       	in	r24, 0x17	; 23
 3a6:	80 66       	ori	r24, 0x60	; 96
 3a8:	87 bb       	out	0x17, r24	; 23
 3aa:	8a b3       	in	r24, 0x1a	; 26
 3ac:	80 63       	ori	r24, 0x30	; 48
 3ae:	8a bb       	out	0x1a, r24	; 26
    set_1_RED();set_2_RED();set_3_RED();set_0_RED();
 3b0:	8b b3       	in	r24, 0x1b	; 27
 3b2:	8f 73       	andi	r24, 0x3F	; 63
 3b4:	8b bb       	out	0x1b, r24	; 27
 3b6:	df 9a       	sbi	0x1b, 7	; 27
 3b8:	88 b3       	in	r24, 0x18	; 24
 3ba:	87 7e       	andi	r24, 0xE7	; 231
 3bc:	88 bb       	out	0x18, r24	; 24
 3be:	c4 9a       	sbi	0x18, 4	; 24
 3c0:	88 b3       	in	r24, 0x18	; 24
 3c2:	8f 79       	andi	r24, 0x9F	; 159
 3c4:	88 bb       	out	0x18, r24	; 24
 3c6:	c6 9a       	sbi	0x18, 6	; 24
 3c8:	8b b3       	in	r24, 0x1b	; 27
 3ca:	8f 7c       	andi	r24, 0xCF	; 207
 3cc:	8b bb       	out	0x1b, r24	; 27
 3ce:	dd 9a       	sbi	0x1b, 5	; 27
 3d0:	08 95       	ret

000003d2 <initADC>:
{
  // this function initialises the ADC 

  // prescaler set to 128 for mcu running at 8MHz

  ADMUX =
 3d2:	80 ea       	ldi	r24, 0xA0	; 160
 3d4:	87 b9       	out	0x07, r24	; 7
            (1 << ADEN)  |     // Enable ADC 
            (0 << ADPS2) |     // set prescaler to 2, bit 2 
            (0 << ADPS1) |     // set prescaler to 2, bit 1 
            (0 << ADPS0);      // set prescaler to 2, bit 0  
#else
  ADCSR = 
 3d6:	80 e8       	ldi	r24, 0x80	; 128
 3d8:	86 b9       	out	0x06, r24	; 6
 3da:	08 95       	ret

000003dc <getAdc>:
#endif
}

unsigned long int getAdc(int channel){

ADMUX =(ADMUX&0xe0)+(channel&0x1f); // Select channel
 3dc:	97 b1       	in	r25, 0x07	; 7
 3de:	8f 71       	andi	r24, 0x1F	; 31
 3e0:	90 7e       	andi	r25, 0xE0	; 224
 3e2:	89 0f       	add	r24, r25
 3e4:	87 b9       	out	0x07, r24	; 7
#ifdef __AVR_ATtiny261__
	ADCSRA |= (1 << ADSC);         // start ADC measurement
#else
	ADCSR |= (1 << ADSC);         // start ADC measurement
 3e6:	36 9a       	sbi	0x06, 6	; 6
#endif

#ifdef __AVR_ATtiny261__
	while (ADCSRA & (1 << ADSC) ); // wait till conversion complete 
#else
	while (ADCSR & (1 << ADSC) ); // wait till conversion complete 
 3e8:	36 99       	sbic	0x06, 6	; 6
 3ea:	fe cf       	rjmp	.-4      	; 0x3e8 <getAdc+0xc>
#endif
return (ADCL>>6)+(ADCH<<2); // need to read ADCL FIRST otherwise ADC won't work. says DS.
 3ec:	84 b1       	in	r24, 0x04	; 4
 3ee:	65 b1       	in	r22, 0x05	; 5
 3f0:	82 95       	swap	r24
 3f2:	86 95       	lsr	r24
 3f4:	86 95       	lsr	r24
 3f6:	83 70       	andi	r24, 0x03	; 3
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	66 0f       	add	r22, r22
 3fc:	77 1f       	adc	r23, r23
 3fe:	66 0f       	add	r22, r22
 400:	77 1f       	adc	r23, r23
 402:	68 0f       	add	r22, r24
 404:	71 1d       	adc	r23, r1
 406:	88 27       	eor	r24, r24
 408:	77 fd       	sbrc	r23, 7
 40a:	80 95       	com	r24
 40c:	98 2f       	mov	r25, r24

}
 40e:	08 95       	ret

00000410 <getVCCVolts>:
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	08 95       	ret

0000041a <main>:
led_state logic,rail1,rail2,rail3;

int main(void)
{
    const int msecsDelayPost = 10;
    initADC();
 41a:	db df       	rcall	.-74     	; 0x3d2 <initADC>
    initLEDs();
 41c:	bd df       	rcall	.-134    	; 0x398 <initLEDs>


    initTimer();
 41e:	af de       	rcall	.-674    	; 0x17e <initTimer>

    while (1) {
	checkRails();
 420:	0a de       	rcall	.-1004   	; 0x36 <checkRails>
	
	//setLED(1, YELLOW);
	setLEDs();
 422:	76 de       	rcall	.-788    	; 0x110 <setLEDs>
 424:	83 ec       	ldi	r24, 0xC3	; 195
 426:	99 e0       	ldi	r25, 0x09	; 9
 428:	01 97       	sbiw	r24, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <main+0xe>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <main+0x14>
 42e:	00 00       	nop
 430:	f7 cf       	rjmp	.-18     	; 0x420 <main+0x6>

00000432 <_exit>:
 432:	f8 94       	cli

00000434 <__stop_program>:
 434:	ff cf       	rjmp	.-2      	; 0x434 <__stop_program>
