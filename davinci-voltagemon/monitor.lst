
monitor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000003ce  00000462  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  00000462  2**0
                  ALLOC
  3 .stab         00001800  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f22  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002b86  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	c4 c0       	rjmp	.+392    	; 0x190 <__vector_3>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	aa 36       	cpi	r26, 0x6A	; 106
  3a:	b1 07       	cpc	r27, r17
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	b9 d1       	rcall	.+882    	; 0x3b2 <main>
  40:	c4 c1       	rjmp	.+904    	; 0x3ca <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <checkRails>:
    }

    return 0;
}

void checkRails(){
  44:	0f 93       	push	r16
  46:	1f 93       	push	r17
		if (getVCCVolts() > v24_upper) { set_1_YEL(); }
		else if (getVCCVolts() < v24_lower) { set_1_RED(); }
		else { set_1_GRN();	}
		*/
		
		unsigned long int voltage = getAdc(0);
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	94 d1       	rcall	.+808    	; 0x376 <getAdc>
		voltage = getAdc(0);
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	91 d1       	rcall	.+802    	; 0x376 <getAdc>
		if (voltage >= rail1_upper) { rail1  = HIGH; }
  54:	6b 39       	cpi	r22, 0x9B	; 155
  56:	71 05       	cpc	r23, r1
  58:	81 05       	cpc	r24, r1
  5a:	91 05       	cpc	r25, r1
  5c:	18 f0       	brcs	.+6      	; 0x64 <checkRails+0x20>
  5e:	83 e0       	ldi	r24, 0x03	; 3
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	0d c0       	rjmp	.+26     	; 0x7e <checkRails+0x3a>
		else if ((voltage <rail1_upper) && (voltage >= rail1_lower)) { rail1=NOMINAL; }
  64:	8b 01       	movw	r16, r22
  66:	9c 01       	movw	r18, r24
  68:	0d 57       	subi	r16, 0x7D	; 125
  6a:	11 09       	sbc	r17, r1
  6c:	21 09       	sbc	r18, r1
  6e:	31 09       	sbc	r19, r1
  70:	0e 31       	cpi	r16, 0x1E	; 30
  72:	11 05       	cpc	r17, r1
  74:	21 05       	cpc	r18, r1
  76:	31 05       	cpc	r19, r1
  78:	38 f4       	brcc	.+14     	; 0x88 <checkRails+0x44>
  7a:	82 e0       	ldi	r24, 0x02	; 2
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	90 93 67 00 	sts	0x0067, r25
  82:	80 93 66 00 	sts	0x0066, r24
  86:	11 c0       	rjmp	.+34     	; 0xaa <checkRails+0x66>
		else if ((voltage < rail1_lower) && (voltage >= rail_min )) { rail1= LOW; }
  88:	dc 01       	movw	r26, r24
  8a:	cb 01       	movw	r24, r22
  8c:	0a 97       	sbiw	r24, 0x0a	; 10
  8e:	a1 09       	sbc	r26, r1
  90:	b1 09       	sbc	r27, r1
  92:	83 37       	cpi	r24, 0x73	; 115
  94:	91 05       	cpc	r25, r1
  96:	a1 05       	cpc	r26, r1
  98:	b1 05       	cpc	r27, r1
  9a:	18 f4       	brcc	.+6      	; 0xa2 <checkRails+0x5e>
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	ee cf       	rjmp	.-36     	; 0x7e <checkRails+0x3a>
		else { rail1 = NONE;	}
  a2:	10 92 67 00 	sts	0x0067, r1
  a6:	10 92 66 00 	sts	0x0066, r1

		voltage = getAdc(1);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	63 d1       	rcall	.+710    	; 0x376 <getAdc>
		if (voltage >= rail2_upper) { rail2  = HIGH; }
  b0:	62 32       	cpi	r22, 0x22	; 34
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	72 07       	cpc	r23, r18
  b6:	81 05       	cpc	r24, r1
  b8:	91 05       	cpc	r25, r1
  ba:	18 f0       	brcs	.+6      	; 0xc2 <checkRails+0x7e>
  bc:	83 e0       	ldi	r24, 0x03	; 3
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	1a c0       	rjmp	.+52     	; 0xf6 <__stack+0x17>
		else if ((voltage <rail2_upper) && (voltage >= rail2_lower)) { rail2=NOMINAL; }
  c2:	8b 01       	movw	r16, r22
  c4:	9c 01       	movw	r18, r24
  c6:	02 50       	subi	r16, 0x02	; 2
  c8:	11 40       	sbci	r17, 0x01	; 1
  ca:	21 09       	sbc	r18, r1
  cc:	31 09       	sbc	r19, r1
  ce:	00 32       	cpi	r16, 0x20	; 32
  d0:	11 05       	cpc	r17, r1
  d2:	21 05       	cpc	r18, r1
  d4:	31 05       	cpc	r19, r1
  d6:	18 f4       	brcc	.+6      	; 0xde <checkRails+0x9a>
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0c c0       	rjmp	.+24     	; 0xf6 <__stack+0x17>
		else if ((voltage < rail2_lower) && (voltage >= rail_min )) { rail2= LOW; }
  de:	dc 01       	movw	r26, r24
  e0:	cb 01       	movw	r24, r22
  e2:	0a 97       	sbiw	r24, 0x0a	; 10
  e4:	a1 09       	sbc	r26, r1
  e6:	b1 09       	sbc	r27, r1
  e8:	88 3f       	cpi	r24, 0xF8	; 248
  ea:	91 05       	cpc	r25, r1
  ec:	a1 05       	cpc	r26, r1
  ee:	b1 05       	cpc	r27, r1
  f0:	38 f4       	brcc	.+14     	; 0x100 <__stack+0x21>
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	90 93 63 00 	sts	0x0063, r25
  fa:	80 93 62 00 	sts	0x0062, r24
  fe:	04 c0       	rjmp	.+8      	; 0x108 <__stack+0x29>
		else { rail2 = NONE;	}
 100:	10 92 63 00 	sts	0x0063, r1
 104:	10 92 62 00 	sts	0x0062, r1
		if (voltage >= rail3_upper) { rail3  = HIGH; }
		else if ((voltage <rail3_upper) && (voltage >= rail3_lower)) { rail3=NOMINAL; }
		else if ((voltage < rail3_lower) && (voltage >= rail_min )) { rail3= LOW; }
		else { rail3 = NONE;	}
#endif
}
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
 10c:	08 95       	ret

0000010e <setLEDs>:
		case LOW: setLED(0,RED);break;
		case NOMINAL: setLED(0,GREEN);break;
		case HIGH: setLED(0,YELLOW);break;
	}
*/
	switch(rail1){
 10e:	80 91 66 00 	lds	r24, 0x0066
 112:	90 91 67 00 	lds	r25, 0x0067
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	91 05       	cpc	r25, r1
 11a:	49 f0       	breq	.+18     	; 0x12e <setLEDs+0x20>
 11c:	40 f0       	brcs	.+16     	; 0x12e <setLEDs+0x20>
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	91 05       	cpc	r25, r1
 122:	41 f0       	breq	.+16     	; 0x134 <setLEDs+0x26>
 124:	03 97       	sbiw	r24, 0x03	; 3
 126:	59 f4       	brne	.+22     	; 0x13e <setLEDs+0x30>
		case NONE: setLED(0,RED);break;
		case LOW: setLED(0,RED);break;
		case NOMINAL: setLED(0,GREEN);break;
		case HIGH: setLED(0,YELLOW);break;
 128:	63 e0       	ldi	r22, 0x03	; 3
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	05 c0       	rjmp	.+10     	; 0x138 <setLEDs+0x2a>
		case HIGH: setLED(0,YELLOW);break;
	}
*/
	switch(rail1){
		case NONE: setLED(0,RED);break;
		case LOW: setLED(0,RED);break;
 12e:	62 e0       	ldi	r22, 0x02	; 2
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <setLEDs+0x2a>
		case NOMINAL: setLED(0,GREEN);break;
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	70 e0       	ldi	r23, 0x00	; 0
		case HIGH: setLED(0,YELLOW);break;
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	75 d0       	rcall	.+234    	; 0x228 <setLED>
	}

// force 1,0 off
//set_0_undir();
//set_1_undir();
	switch(rail2){
 13e:	80 91 62 00 	lds	r24, 0x0062
 142:	90 91 63 00 	lds	r25, 0x0063
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	91 05       	cpc	r25, r1
 14a:	49 f0       	breq	.+18     	; 0x15e <setLEDs+0x50>
 14c:	40 f0       	brcs	.+16     	; 0x15e <setLEDs+0x50>
 14e:	82 30       	cpi	r24, 0x02	; 2
 150:	91 05       	cpc	r25, r1
 152:	41 f0       	breq	.+16     	; 0x164 <setLEDs+0x56>
 154:	03 97       	sbiw	r24, 0x03	; 3
 156:	59 f4       	brne	.+22     	; 0x16e <setLEDs+0x60>
		case NONE: setLED(1,RED);break;
		case LOW: setLED(1,RED);break;
		case NOMINAL: setLED(1,GREEN);break;
		case HIGH: setLED(1,YELLOW);break;
 158:	63 e0       	ldi	r22, 0x03	; 3
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	05 c0       	rjmp	.+10     	; 0x168 <setLEDs+0x5a>
// force 1,0 off
//set_0_undir();
//set_1_undir();
	switch(rail2){
		case NONE: setLED(1,RED);break;
		case LOW: setLED(1,RED);break;
 15e:	62 e0       	ldi	r22, 0x02	; 2
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <setLEDs+0x5a>
		case NOMINAL: setLED(1,GREEN);break;
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	70 e0       	ldi	r23, 0x00	; 0
		case HIGH: setLED(1,YELLOW);break;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	5d d0       	rcall	.+186    	; 0x228 <setLED>
	}
#endif

#ifdef master
#else
	set_2_undir();
 16e:	87 b3       	in	r24, 0x17	; 23
 170:	87 7e       	andi	r24, 0xE7	; 231
 172:	87 bb       	out	0x17, r24	; 23
#endif
set_3_undir();
 174:	87 b3       	in	r24, 0x17	; 23
 176:	8f 79       	andi	r24, 0x9F	; 159
 178:	87 bb       	out	0x17, r24	; 23
 17a:	08 95       	ret

0000017c <initTimer>:



void initTimer(){

TCCR1A = 0x00; 
 17c:	10 be       	out	0x30, r1	; 48
TCCR1B |= _BV(CS10) | _BV(CS11)  | _BV(CS13); 
 17e:	8f b5       	in	r24, 0x2f	; 47
 180:	8b 60       	ori	r24, 0x0B	; 11
 182:	8f bd       	out	0x2f, r24	; 47

TIMSK = _BV(OCIE1A); 
 184:	80 e4       	ldi	r24, 0x40	; 64
 186:	89 bf       	out	0x39, r24	; 57

OCR1A = 5; 
 188:	85 e0       	ldi	r24, 0x05	; 5
 18a:	8d bd       	out	0x2d, r24	; 45


   sei();
 18c:	78 94       	sei
 18e:	08 95       	ret

00000190 <__vector_3>:
}

int state=0;
ISR(TIMER1_COMPA_vect) {
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
	/*if (state & logic==NONE) {set_0_undir();}
	else {set_0_dir();}*/

	if (state & rail1==NONE) {set_0_undir();}
 1a2:	21 e0       	ldi	r18, 0x01	; 1
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	80 91 66 00 	lds	r24, 0x0066
 1aa:	90 91 67 00 	lds	r25, 0x0067
 1ae:	89 2b       	or	r24, r25
 1b0:	11 f0       	breq	.+4      	; 0x1b6 <__vector_3+0x26>
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	80 91 60 00 	lds	r24, 0x0060
 1ba:	90 91 61 00 	lds	r25, 0x0061
 1be:	82 23       	and	r24, r18
 1c0:	93 23       	and	r25, r19
 1c2:	89 2b       	or	r24, r25
 1c4:	19 f0       	breq	.+6      	; 0x1cc <__vector_3+0x3c>
 1c6:	8a b3       	in	r24, 0x1a	; 26
 1c8:	8f 7c       	andi	r24, 0xCF	; 207
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <__vector_3+0x40>
	else {set_0_dir();}
 1cc:	8a b3       	in	r24, 0x1a	; 26
 1ce:	80 63       	ori	r24, 0x30	; 48
 1d0:	8a bb       	out	0x1a, r24	; 26

	if (state & rail2==NONE) {set_1_undir();}
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	80 91 62 00 	lds	r24, 0x0062
 1da:	90 91 63 00 	lds	r25, 0x0063
 1de:	89 2b       	or	r24, r25
 1e0:	11 f0       	breq	.+4      	; 0x1e6 <__vector_3+0x56>
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	80 91 60 00 	lds	r24, 0x0060
 1ea:	90 91 61 00 	lds	r25, 0x0061
 1ee:	82 23       	and	r24, r18
 1f0:	93 23       	and	r25, r19
 1f2:	89 2b       	or	r24, r25
 1f4:	19 f0       	breq	.+6      	; 0x1fc <__vector_3+0x6c>
 1f6:	8a b3       	in	r24, 0x1a	; 26
 1f8:	8f 73       	andi	r24, 0x3F	; 63
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <__vector_3+0x70>
	else {set_1_dir();}
 1fc:	8a b3       	in	r24, 0x1a	; 26
 1fe:	80 6c       	ori	r24, 0xC0	; 192
 200:	8a bb       	out	0x1a, r24	; 26
#ifdef master
	if (state & rail3==NONE) {set_2_undir();}
	else {set_2_dir();}
#endif
	state = ~state;
 202:	80 91 60 00 	lds	r24, 0x0060
 206:	90 91 61 00 	lds	r25, 0x0061
 20a:	80 95       	com	r24
 20c:	90 95       	com	r25
 20e:	90 93 61 00 	sts	0x0061, r25
 212:	80 93 60 00 	sts	0x0060, r24
}
 216:	9f 91       	pop	r25
 218:	8f 91       	pop	r24
 21a:	3f 91       	pop	r19
 21c:	2f 91       	pop	r18
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <setLED>:
#include "leds.h"
#include <avr/io.h>

void setLED(int led, led_state color){
	switch(led){
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	91 05       	cpc	r25, r1
 22c:	59 f1       	breq	.+86     	; 0x284 <setLED+0x5c>
 22e:	1c f4       	brge	.+6      	; 0x236 <setLED+0xe>
 230:	89 2b       	or	r24, r25
 232:	49 f0       	breq	.+18     	; 0x246 <setLED+0x1e>
 234:	08 95       	ret
 236:	82 30       	cpi	r24, 0x02	; 2
 238:	91 05       	cpc	r25, r1
 23a:	09 f4       	brne	.+2      	; 0x23e <setLED+0x16>
 23c:	41 c0       	rjmp	.+130    	; 0x2c0 <setLED+0x98>
 23e:	03 97       	sbiw	r24, 0x03	; 3
 240:	09 f4       	brne	.+2      	; 0x244 <setLED+0x1c>
 242:	5c c0       	rjmp	.+184    	; 0x2fc <setLED+0xd4>
 244:	08 95       	ret
		case 0:
			switch(color){
 246:	61 30       	cpi	r22, 0x01	; 1
 248:	71 05       	cpc	r23, r1
 24a:	81 f0       	breq	.+32     	; 0x26c <setLED+0x44>
 24c:	38 f0       	brcs	.+14     	; 0x25c <setLED+0x34>
 24e:	62 30       	cpi	r22, 0x02	; 2
 250:	71 05       	cpc	r23, r1
 252:	39 f0       	breq	.+14     	; 0x262 <setLED+0x3a>
 254:	63 30       	cpi	r22, 0x03	; 3
 256:	71 05       	cpc	r23, r1
 258:	71 f0       	breq	.+28     	; 0x276 <setLED+0x4e>
 25a:	08 95       	ret
				case OFF: set_0_OFF(); break;
 25c:	8b b3       	in	r24, 0x1b	; 27
 25e:	8f 7c       	andi	r24, 0xCF	; 207
 260:	0f c0       	rjmp	.+30     	; 0x280 <setLED+0x58>
				case RED: set_0_RED();break;
 262:	8b b3       	in	r24, 0x1b	; 27
 264:	8f 7c       	andi	r24, 0xCF	; 207
 266:	8b bb       	out	0x1b, r24	; 27
 268:	dd 9a       	sbi	0x1b, 5	; 27
 26a:	08 95       	ret
				case GREEN: set_0_GRN(); break;
 26c:	8b b3       	in	r24, 0x1b	; 27
 26e:	8f 7c       	andi	r24, 0xCF	; 207
 270:	8b bb       	out	0x1b, r24	; 27
 272:	dc 9a       	sbi	0x1b, 4	; 27
 274:	08 95       	ret
				case YELLOW: set_0_YEL(); break;
 276:	8b b3       	in	r24, 0x1b	; 27
 278:	8f 7c       	andi	r24, 0xCF	; 207
 27a:	8b bb       	out	0x1b, r24	; 27
 27c:	8b b3       	in	r24, 0x1b	; 27
 27e:	80 63       	ori	r24, 0x30	; 48
 280:	8b bb       	out	0x1b, r24	; 27
 282:	08 95       	ret
			}
		break;
		case 1:
			switch(color){
 284:	61 30       	cpi	r22, 0x01	; 1
 286:	71 05       	cpc	r23, r1
 288:	81 f0       	breq	.+32     	; 0x2aa <setLED+0x82>
 28a:	38 f0       	brcs	.+14     	; 0x29a <setLED+0x72>
 28c:	62 30       	cpi	r22, 0x02	; 2
 28e:	71 05       	cpc	r23, r1
 290:	39 f0       	breq	.+14     	; 0x2a0 <setLED+0x78>
 292:	63 30       	cpi	r22, 0x03	; 3
 294:	71 05       	cpc	r23, r1
 296:	71 f0       	breq	.+28     	; 0x2b4 <setLED+0x8c>
 298:	08 95       	ret
				case OFF: set_1_OFF(); break;
 29a:	8b b3       	in	r24, 0x1b	; 27
 29c:	8f 73       	andi	r24, 0x3F	; 63
 29e:	f0 cf       	rjmp	.-32     	; 0x280 <setLED+0x58>
				case RED: set_1_RED();break;
 2a0:	8b b3       	in	r24, 0x1b	; 27
 2a2:	8f 73       	andi	r24, 0x3F	; 63
 2a4:	8b bb       	out	0x1b, r24	; 27
 2a6:	df 9a       	sbi	0x1b, 7	; 27
 2a8:	08 95       	ret
				case GREEN: set_1_GRN(); break;
 2aa:	8b b3       	in	r24, 0x1b	; 27
 2ac:	8f 73       	andi	r24, 0x3F	; 63
 2ae:	8b bb       	out	0x1b, r24	; 27
 2b0:	de 9a       	sbi	0x1b, 6	; 27
 2b2:	08 95       	ret
				case YELLOW: set_1_YEL(); break;
 2b4:	8b b3       	in	r24, 0x1b	; 27
 2b6:	8f 73       	andi	r24, 0x3F	; 63
 2b8:	8b bb       	out	0x1b, r24	; 27
 2ba:	8b b3       	in	r24, 0x1b	; 27
 2bc:	80 6c       	ori	r24, 0xC0	; 192
 2be:	e0 cf       	rjmp	.-64     	; 0x280 <setLED+0x58>
			}

		break;
		case 2:
			switch(color){
 2c0:	61 30       	cpi	r22, 0x01	; 1
 2c2:	71 05       	cpc	r23, r1
 2c4:	81 f0       	breq	.+32     	; 0x2e6 <setLED+0xbe>
 2c6:	38 f0       	brcs	.+14     	; 0x2d6 <setLED+0xae>
 2c8:	62 30       	cpi	r22, 0x02	; 2
 2ca:	71 05       	cpc	r23, r1
 2cc:	39 f0       	breq	.+14     	; 0x2dc <setLED+0xb4>
 2ce:	63 30       	cpi	r22, 0x03	; 3
 2d0:	71 05       	cpc	r23, r1
 2d2:	71 f0       	breq	.+28     	; 0x2f0 <setLED+0xc8>
 2d4:	08 95       	ret
				case OFF: set_2_OFF(); break;
 2d6:	88 b3       	in	r24, 0x18	; 24
 2d8:	87 7e       	andi	r24, 0xE7	; 231
 2da:	29 c0       	rjmp	.+82     	; 0x32e <setLED+0x106>
				case RED: set_2_RED();break;
 2dc:	88 b3       	in	r24, 0x18	; 24
 2de:	87 7e       	andi	r24, 0xE7	; 231
 2e0:	88 bb       	out	0x18, r24	; 24
 2e2:	c4 9a       	sbi	0x18, 4	; 24
 2e4:	08 95       	ret
				case GREEN: set_2_GRN(); break;
 2e6:	88 b3       	in	r24, 0x18	; 24
 2e8:	87 7e       	andi	r24, 0xE7	; 231
 2ea:	88 bb       	out	0x18, r24	; 24
 2ec:	c3 9a       	sbi	0x18, 3	; 24
 2ee:	08 95       	ret
				case YELLOW: set_2_YEL(); break;
 2f0:	88 b3       	in	r24, 0x18	; 24
 2f2:	87 7e       	andi	r24, 0xE7	; 231
 2f4:	88 bb       	out	0x18, r24	; 24
 2f6:	88 b3       	in	r24, 0x18	; 24
 2f8:	88 61       	ori	r24, 0x18	; 24
 2fa:	19 c0       	rjmp	.+50     	; 0x32e <setLED+0x106>
			}
		break;
		case 3:
			switch(color){
 2fc:	61 30       	cpi	r22, 0x01	; 1
 2fe:	71 05       	cpc	r23, r1
 300:	81 f0       	breq	.+32     	; 0x322 <setLED+0xfa>
 302:	38 f0       	brcs	.+14     	; 0x312 <setLED+0xea>
 304:	62 30       	cpi	r22, 0x02	; 2
 306:	71 05       	cpc	r23, r1
 308:	39 f0       	breq	.+14     	; 0x318 <setLED+0xf0>
 30a:	63 30       	cpi	r22, 0x03	; 3
 30c:	71 05       	cpc	r23, r1
 30e:	61 f0       	breq	.+24     	; 0x328 <setLED+0x100>
 310:	08 95       	ret
				case OFF: set_3_OFF(); break;
 312:	88 b3       	in	r24, 0x18	; 24
 314:	8f 79       	andi	r24, 0x9F	; 159
 316:	0b c0       	rjmp	.+22     	; 0x32e <setLED+0x106>
				case RED: set_3_RED();break;
 318:	88 b3       	in	r24, 0x18	; 24
 31a:	8f 79       	andi	r24, 0x9F	; 159
 31c:	88 bb       	out	0x18, r24	; 24
 31e:	c6 9a       	sbi	0x18, 6	; 24
 320:	08 95       	ret
				case GREEN: set_3_GRN(); break;
 322:	c6 98       	cbi	0x18, 6	; 24
 324:	c5 9a       	sbi	0x18, 5	; 24
 326:	08 95       	ret
				case YELLOW: set_3_YEL(); break;
 328:	c6 98       	cbi	0x18, 6	; 24
 32a:	88 b3       	in	r24, 0x18	; 24
 32c:	80 66       	ori	r24, 0x60	; 96
 32e:	88 bb       	out	0x18, r24	; 24
 330:	08 95       	ret

00000332 <initLEDs>:
	
}


void initLEDs(){
    set_1_dir();set_2_dir();set_3_dir();set_0_dir();
 332:	8a b3       	in	r24, 0x1a	; 26
 334:	80 6c       	ori	r24, 0xC0	; 192
 336:	8a bb       	out	0x1a, r24	; 26
 338:	87 b3       	in	r24, 0x17	; 23
 33a:	88 61       	ori	r24, 0x18	; 24
 33c:	87 bb       	out	0x17, r24	; 23
 33e:	87 b3       	in	r24, 0x17	; 23
 340:	80 66       	ori	r24, 0x60	; 96
 342:	87 bb       	out	0x17, r24	; 23
 344:	8a b3       	in	r24, 0x1a	; 26
 346:	80 63       	ori	r24, 0x30	; 48
 348:	8a bb       	out	0x1a, r24	; 26
    set_1_RED();set_2_RED();set_3_RED();set_0_RED();
 34a:	8b b3       	in	r24, 0x1b	; 27
 34c:	8f 73       	andi	r24, 0x3F	; 63
 34e:	8b bb       	out	0x1b, r24	; 27
 350:	df 9a       	sbi	0x1b, 7	; 27
 352:	88 b3       	in	r24, 0x18	; 24
 354:	87 7e       	andi	r24, 0xE7	; 231
 356:	88 bb       	out	0x18, r24	; 24
 358:	c4 9a       	sbi	0x18, 4	; 24
 35a:	88 b3       	in	r24, 0x18	; 24
 35c:	8f 79       	andi	r24, 0x9F	; 159
 35e:	88 bb       	out	0x18, r24	; 24
 360:	c6 9a       	sbi	0x18, 6	; 24
 362:	8b b3       	in	r24, 0x1b	; 27
 364:	8f 7c       	andi	r24, 0xCF	; 207
 366:	8b bb       	out	0x1b, r24	; 27
 368:	dd 9a       	sbi	0x1b, 5	; 27
 36a:	08 95       	ret

0000036c <initADC>:
{
  // this function initialises the ADC 

  // prescaler set to 128 for mcu running at 8MHz

  ADMUX =
 36c:	80 ea       	ldi	r24, 0xA0	; 160
 36e:	87 b9       	out	0x07, r24	; 7
            (0 << MUX3)  |     // use ADC2 for input (PB4), MUX bit 3
            (0 << MUX2)  |     // use ADC2 for input (PB4), MUX bit 2
            (0 << MUX1)  |     // use ADC2 for input (PB4), MUX bit 1
            (0 << MUX0);       // use ADC2 for input (PB4), MUX bit 0

  ADCSRA = 
 370:	80 e8       	ldi	r24, 0x80	; 128
 372:	86 b9       	out	0x06, r24	; 6
 374:	08 95       	ret

00000376 <getAdc>:
            (0 << ADPS0);      // set prescaler to 2, bit 0  
}

unsigned long int getAdc(int channel){

ADMUX =(ADMUX&0xe0)+(channel&0x1f); // Select channel
 376:	97 b1       	in	r25, 0x07	; 7
 378:	8f 71       	andi	r24, 0x1F	; 31
 37a:	90 7e       	andi	r25, 0xE0	; 224
 37c:	89 0f       	add	r24, r25
 37e:	87 b9       	out	0x07, r24	; 7
ADCSRA |= (1 << ADSC);         // start ADC measurement
 380:	36 9a       	sbi	0x06, 6	; 6
while (ADCSRA & (1 << ADSC) ); // wait till conversion complete 
 382:	36 99       	sbic	0x06, 6	; 6
 384:	fe cf       	rjmp	.-4      	; 0x382 <getAdc+0xc>

return (ADCL>>6)+(ADCH<<2); // need to read ADCL FIRST otherwise ADC won't work. says DS.
 386:	84 b1       	in	r24, 0x04	; 4
 388:	65 b1       	in	r22, 0x05	; 5
 38a:	82 95       	swap	r24
 38c:	86 95       	lsr	r24
 38e:	86 95       	lsr	r24
 390:	83 70       	andi	r24, 0x03	; 3
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	66 0f       	add	r22, r22
 396:	77 1f       	adc	r23, r23
 398:	66 0f       	add	r22, r22
 39a:	77 1f       	adc	r23, r23
 39c:	68 0f       	add	r22, r24
 39e:	71 1d       	adc	r23, r1
 3a0:	88 27       	eor	r24, r24
 3a2:	77 fd       	sbrc	r23, 7
 3a4:	80 95       	com	r24
 3a6:	98 2f       	mov	r25, r24

}
 3a8:	08 95       	ret

000003aa <getVCCVolts>:
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	cb 01       	movw	r24, r22
 3b0:	08 95       	ret

000003b2 <main>:
led_state logic,rail1,rail2,rail3;

int main(void)
{
    const int msecsDelayPost = 10;
    initADC();
 3b2:	dc df       	rcall	.-72     	; 0x36c <initADC>
    initLEDs();
 3b4:	be df       	rcall	.-132    	; 0x332 <initLEDs>
    initTimer();
 3b6:	e2 de       	rcall	.-572    	; 0x17c <initTimer>


    while (1) {
	checkRails();
 3b8:	45 de       	rcall	.-886    	; 0x44 <checkRails>
	
	//setLED(1, YELLOW);
	setLEDs();
 3ba:	a9 de       	rcall	.-686    	; 0x10e <setLEDs>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3bc:	83 ec       	ldi	r24, 0xC3	; 195
 3be:	99 e0       	ldi	r25, 0x09	; 9
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <main+0xe>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <main+0x14>
 3c6:	00 00       	nop
 3c8:	f7 cf       	rjmp	.-18     	; 0x3b8 <main+0x6>

000003ca <_exit>:
 3ca:	f8 94       	cli

000003cc <__stop_program>:
 3cc:	ff cf       	rjmp	.-2      	; 0x3cc <__stop_program>
