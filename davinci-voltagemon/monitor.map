Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.8.2/../../../avr/lib/crttn261.o (exit)
/usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_clear_bss.o)
                              monitor.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

rail2               0x2               monitor.o
rail3               0x2               monitor.o
rail1               0x2               monitor.o
logic               0x2               monitor.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x00000000         0x00002000         xr
data             0x00800060         0x0000ffa0         rw !x
eeprom           0x00810000         0x00010000         rw !x
fuse             0x00820000         0x00000400         rw !x
lock             0x00830000         0x00000400         rw !x
signature        0x00840000         0x00000400         rw !x
user_signatures  0x00850000         0x00000400         rw !x
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/4.8.2/../../../avr/lib/crttn261.o
LOAD monitor.o
LOAD leds.o
LOAD adc.o
START GROUP
LOAD /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a
LOAD /usr/lib/gcc/avr/4.8.2/../../../avr/lib/libm.a
LOAD /usr/lib/gcc/avr/4.8.2/../../../avr/lib/libc.a
END GROUP

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x00000000      0x3ce
 *(.vectors)
 .vectors       0x00000000       0x26 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/crttn261.o
                0x00000000                __vectors
                0x00000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x00000026                . = ALIGN (0x2)
                0x00000026                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x00000026        0x0 linker stubs
 *(.trampolines*)
                0x00000026                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x00000026                __ctors_start = .
 *(.ctors)
                0x00000026                __ctors_end = .
                0x00000026                __dtors_start = .
 *(.dtors)
                0x00000026                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x00000026        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/crttn261.o
                0x00000026                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x00000026        0x8 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/crttn261.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000002e       0x10 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_clear_bss.o)
                0x0000002e                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x0000003e        0x4 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/crttn261.o
 *(.init9)
 *(.text)
 .text          0x00000042        0x2 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/crttn261.o
                0x00000042                __vector_1
                0x00000042                __vector_12
                0x00000042                __bad_interrupt
                0x00000042                __vector_6
                0x00000042                __vector_11
                0x00000042                __vector_13
                0x00000042                __vector_17
                0x00000042                __vector_7
                0x00000042                __vector_5
                0x00000042                __vector_4
                0x00000042                __vector_9
                0x00000042                __vector_2
                0x00000042                __vector_15
                0x00000042                __vector_8
                0x00000042                __vector_14
                0x00000042                __vector_10
                0x00000042                __vector_16
                0x00000042                __vector_18
 .text          0x00000044      0x1e4 monitor.o
                0x00000044                checkRails
                0x0000010e                setLEDs
                0x0000017c                initTimer
                0x00000190                __vector_3
 .text          0x00000228      0x144 leds.o
                0x00000228                setLED
                0x00000332                initLEDs
 .text          0x0000036c       0x46 adc.o
                0x0000036c                initADC
                0x00000376                getAdc
                0x000003aa                getVCCVolts
 .text          0x000003b2        0x0 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_exit.o)
 .text          0x000003b2        0x0 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_clear_bss.o)
                0x000003b2                . = ALIGN (0x2)
 *(.text.*)
 .text.startup  0x000003b2       0x18 monitor.o
                0x000003b2                main
 .text.libgcc.mul
                0x000003ca        0x0 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_exit.o)
 .text.libgcc.div
                0x000003ca        0x0 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_exit.o)
 .text.libgcc   0x000003ca        0x0 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_exit.o)
 .text.libgcc.prologue
                0x000003ca        0x0 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_exit.o)
 .text.libgcc.builtins
                0x000003ca        0x0 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_exit.o)
 .text.libgcc.fmul
                0x000003ca        0x0 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_exit.o)
 .text.libgcc.fixed
                0x000003ca        0x0 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_exit.o)
 .text.libgcc.mul
                0x000003ca        0x0 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_clear_bss.o)
 .text.libgcc.div
                0x000003ca        0x0 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_clear_bss.o)
 .text.libgcc   0x000003ca        0x0 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_clear_bss.o)
 .text.libgcc.prologue
                0x000003ca        0x0 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_clear_bss.o)
 .text.libgcc.builtins
                0x000003ca        0x0 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_clear_bss.o)
 .text.libgcc.fmul
                0x000003ca        0x0 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_clear_bss.o)
 .text.libgcc.fixed
                0x000003ca        0x0 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_clear_bss.o)
                0x000003ca                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x000003ca        0x0 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_exit.o)
                0x000003ca                exit
                0x000003ca                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x000003ca        0x4 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_exit.o)
 *(.fini0)
                0x000003ce                _etext = .

.data           0x00800060        0x0 load address 0x000003ce
                0x00800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x00800060        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/crttn261.o
 .data          0x00800060        0x0 monitor.o
 .data          0x00800060        0x0 leds.o
 .data          0x00800060        0x0 adc.o
 .data          0x00800060        0x0 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_exit.o)
 .data          0x00800060        0x0 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_clear_bss.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x00800060                . = ALIGN (0x2)
                0x00800060                _edata = .
                0x00800060                PROVIDE (__data_end, .)

.bss            0x00800060        0xa
                0x00800060                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x00800060        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/crttn261.o
 .bss           0x00800060        0x2 monitor.o
                0x00800060                state
 .bss           0x00800062        0x0 leds.o
 .bss           0x00800062        0x0 adc.o
 .bss           0x00800062        0x0 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_exit.o)
 .bss           0x00800062        0x0 /usr/lib/gcc/avr/4.8.2/avr25/tiny-stack/libgcc.a(_clear_bss.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x00800062        0x8 monitor.o
                0x00800062                rail2
                0x00800064                rail3
                0x00800066                rail1
                0x00800068                logic
                0x0080006a                PROVIDE (__bss_end, .)
                0x000003ce                __data_load_start = LOADADDR (.data)
                0x000003ce                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x0080006a        0x0
                0x0080006a                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x0080006a                PROVIDE (__noinit_end, .)
                0x0080006a                _end = .
                0x0080006a                PROVIDE (__heap_start, .)

.eeprom         0x00810000        0x0
 *(.eeprom*)
                0x00810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.user_signatures
 *(.user_signatures*)

.stab           0x00000000     0x1800
 *(.stab)
 .stab          0x00000000      0x6b4 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/crttn261.o
 .stab          0x000006b4      0x90c monitor.o
                                0x918 (size before relaxing)
 .stab          0x00000fc0      0x45c leds.o
                                0x648 (size before relaxing)
 .stab          0x0000141c      0x3e4 adc.o
                                0x600 (size before relaxing)

.stabstr        0x00000000      0xf22
 *(.stabstr)
 .stabstr       0x00000000      0xf22 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/crttn261.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x00000000       0x11
 *(.comment)
 .comment       0x00000000       0x11 monitor.o
                                 0x12 (size before relaxing)
 .comment       0x00000000       0x12 leds.o
 .comment       0x00000000       0x12 adc.o

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)

.debug_pubtypes
 *(.debug_pubtypes)

.debug_ranges
 *(.debug_ranges)

.debug_macro
 *(.debug_macro)
OUTPUT(monitor.elf elf32-avr)
LOAD linker stubs
